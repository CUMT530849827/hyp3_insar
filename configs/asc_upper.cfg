# vim: set filetype=cfg:
##------------------------ smallbaselineApp.cfg ------------------------##
########## computing resource configuration
mintpy.compute.maxMemory = 120 #[float > 0.0], auto for 4, max memory to allocate in GB
mintpy.compute.cluster   = local #[local / slurm / pbs / lsf / none], auto for none, cluster type
mintpy.compute.numWorker = 16 #[int > 1 / all], auto for 4 (local) or 40 (slurm / pbs / lsf), num of workers


########## 1. load_data
mintpy.load.processor      = hyp3  #[isce, aria, hyp3, gmtsar, snap, gamma, roipac], auto for isce
##---------interferogram datasets:
mintpy.load.unwFile        = /home/micromamba/raw/asc_upper/*/*unw_phase_clip.tif  #[path pattern of unwrapped interferogram files]
mintpy.load.corFile        = /home/micromamba/raw/asc_upper/*/*corr_clip.tif  #[path pattern of spatial coherence       files]
##---------geometry datasets:
mintpy.load.demFile        = /home/micromamba/raw/asc_upper/*/*_dem_clip.tif  #[path of DEM file]
mintpy.load.incAngleFile   = /home/micromamba/raw/asc_upper/*/*_lv_theta_clip.tif  #[path of incidence angle file], optional but recommended
mintpy.load.waterMaskFile  = /home/micromamba/raw/asc_upper/*/*_water_mask_clip.tif  #[path of water  mask file], optional but recommended
##---------subset (optional):
mintpy.subset.yx           = 4006:6555,658:5440


########## 2. modify_network
## 1) Network modification based on temporal/perpendicular baselines, date, num of connections etc.
mintpy.network.tempBaseMax     = 100  #[1-inf, no], auto for no, max temporal baseline in days
mintpy.network.startDate       = 20210101  #[20090101 / no], auto for no
mintpy.network.endDate         = 20220101  #[20110101 / no], auto for no
#2021: 20210101 - 20220101
#2020: 20200101 - 20201201
#2019: 20190101 - 20191201
#2018: 20180201 - 20191201

mintpy.network.excludeDate     = auto  #[20080520,20090817 / no], auto for no
mintpy.network.excludeIfgIndex = auto  #[1:5,25 / no], auto for no, list of ifg index (start from 0)

## 2) Data-driven network modification
mintpy.network.coherenceBased  = yes  #[yes / no], auto for no, exclude interferograms with coherence < minCoherence
mintpy.network.minCoherence    = 0.4  #[0.0-1.0], auto for 0.7

## Additional common parameters for the 2) data-driven network modification
mintpy.network.keepMinSpanTree = no  #[yes / no], auto for yes, keep interferograms in Min Span Tree network
mintpy.network.maskFile        = waterMask.h5  #[file name, no], auto for waterMask.h5 or no [if no waterMask.h5 found]

########## 3. reference_point
mintpy.reference.yx            = 1139, 3141   #[257,151 / auto]
mintpy.reference.maskFile      = waterMask.h5   #[filename / no], auto for maskConnComp.h5


########## 5. invert_network
## Temporal coherence is calculated and used to generate the mask as the reliability measure
## reference: Pepe & Lanari (2006, IEEE-TGRS)
mintpy.networkInversion.minTempCoh  = 0.4 #[0.0-1.0], auto for 0.7, min temporal coherence for mask
mintpy.networkInversion.minNumPixel = 5 #[int > 1], auto for 100, min number of pixels in mask above\


########## 10. velocity
## Bootstrapping
## refernce: Efron and Tibshirani (1986, Stat. Sci.)
mintpy.velocity.bootstrap      = yes   #[yes / no], auto for no, use bootstrap
mintpy.velocity.bootstrapCount = 100   #[int>1], auto for 400, number of iterations for bootstrapping
