# vim: set filetype=cfg:
##------------------------ smallbaselineApp.cfg ------------------------##

########## 1. load_data
mintpy.load.processor      = hyp3  #[isce, aria, gmtsar, snap, gamma, hyp3, roipac], auto for isce
##---------interferogram datasets:
mintpy.load.unwFile        = /mnt/i/hyp3_downloads/p81f1048_10x2_2/*/*unw_phase_clip.tif  #[path pattern of unwrapped interferogram files]
mintpy.load.corFile        = /mnt/i/hyp3_downloads/p81f1048_10x2_2/*/*corr_clip.tif  #[path pattern of spatial coherence       files]
##---------geometry datasets:
mintpy.load.demFile        = /mnt/i/hyp3_downloads/p81f1048_10x2_2/*/S1BB_20171224T070624_20180105T070624_VVP012_INT40_G_ueF_0A8B_dem_clip.tif #[path of DEM file]
mintpy.load.incAngleFile   = /mnt/i/hyp3_downloads/p81f1048_10x2_2/*/S1BB_20171224T070624_20180105T070624_VVP012_INT40_G_ueF_0A8B_inc_map_clip.tif  #[path of incidence angle file], optional but recommended
mintpy.load.waterMaskFile  = /mnt/i/hyp3_downloads/p81f1048_10x2_2/*/S1BB_20171224T070624_20180105T070624_VVP012_INT40_G_ueF_0A8B_water_mask_clip.tif  #[path of water  mask file], optional but recommended
##---------multilook (optional):
## multilook while loading data with nearest interpolation, to reduce dataset size
mintpy.load.ystep          = auto    #[int >= 1], auto for 1 - no multilooking
mintpy.load.xstep          = auto    #[int >= 1], auto for 1 - no multilooking
##---------subset (optional):
## if both yx and lalo are specified, use lalo option unless a) no lookup file AND b) dataset is in radar coord
mintpy.subset.yx           = 4232:6352,884:5214    #[y0:y1,x0:x1 / no], auto for no
mintpy.subset.lalo         = auto    #[S:N,W:E / no], auto for no
# 4232:6352,884:5214 for p81f1048 landslide area

########## 2. modify_network
## reference: Yunjun et al. (2019, section 4.2 and 5.3.1); Chaussard et al. (2015, GRL)
## 1) Network modification based on temporal/perpendicular baselines, date, num of connections etc.
mintpy.network.tempBaseMax     = auto  #[1-inf, no], auto for no, max temporal baseline in days
mintpy.network.perpBaseMax     = auto  #[1-inf, no], auto for no, max perpendicular spatial baseline in meter
mintpy.network.connNumMax      = auto  #[1-inf, no], auto for no, max number of neighbors for each acquisition
mintpy.network.startDate       = auto  #[20090101 / no], auto for no
mintpy.network.endDate         = auto  #[20110101 / no], auto for no
mintpy.network.excludeDate     = auto  #[20080520,20090817 / no], auto for no
mintpy.network.excludeIfgIndex = auto  #[1:5,25 / no], auto for no, list of ifg index (start from 0)
mintpy.network.referenceFile   = auto  #[date12_list.txt / ifgramStack.h5 / no], auto for no

## 2) Coherence-based network modification = (threshold + MST) by default
## It calculates a average coherence for each interferogram using spatial coherence based on input mask (with AOI)
## Then it finds a minimum spanning tree (MST) network with inverse of average coherence as weight (keepMinSpanTree)
## Next it excludes interferograms if a) the average coherence < minCoherence AND b) not in the MST network.
mintpy.network.areaRatioBased  = yes  #[yes / no], auto for no, exclude interferograms with coherence < minCoherence
mintpy.network.keepMinSpanTree = yes  #[yes / no], auto for yes, keep interferograms in Min Span Tree network
mintpy.network.minAreaRatio    = 0.75  #[0.0-1.0], auto for 0.75
mintpy.network.maskFile        = inputs/waterMask.h5  #[file name, no], auto for waterMask.h5 or no [if no waterMask.h5 found]
mintpy.network.aoiYX           = 2628:2730,1924:2063  #[y0:y1,x0:x1 / no], auto for no, area of interest for coherence calculation

